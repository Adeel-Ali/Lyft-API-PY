# -*- coding: utf-8 -*-

"""
    lyftapilib.models.ride_detail
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2016
"""
import dateutil.parser
from .passenger_detail import PassengerDetail
from .driver_detail import DriverDetail
from .vehicle_detail import VehicleDetail
from .ride_location import RideLocation
from .pickup_dropoff_location import PickupDropoffLocation
from .cost import Cost
from .line_item import LineItem
from .cancellation_cost import CancellationCost
from .base_model import BaseModel

class RideDetail(BaseModel):

    """Implementation of the 'RideDetail' model.

    Detail information about a ride

    Attributes:
        ride_id (string): The unique ID of this ride
        status (RideStatusEnum): The current status of the ride
        ride_type (RideTypeEnumWithOtherEnum): The ID of the ride type
        passenger (PassengerDetail): TODO: type description here.
        driver (DriverDetail): TODO: type description here.
        vehicle (VehicleDetail): TODO: type description here.
        origin (RideLocation): The *requested* location for passenger pickup
        destination (RideLocation): The *requested* location for passenger
            drop off
        pickup (PickupDropoffLocation): The *actual* location of passenger
            pickup
        dropoff (PickupDropoffLocation): The *actual* location of passenger
            drop off
        location (RideLocation): The *current* location info of the ride
        primetime_percentage (string): The Prime Time percentage applied to
            the base price
        distance_miles (float): The distance, in miles, that this ride
            traveled. This field is only present after drop-off
        duration_seconds (int): Duration of the ride in seconds from pickup to
            drop-off. This field is only present after drop-off.
        price (Cost): The total price for the current ride
        line_items (list of LineItem): The break down of cost
        can_cancel (list of CanCancelEnum): TODO: type description here.
        canceled_by (string): The role of user who canceled the ride (if
            applicable)
        cancellation_price (CancellationCost): The cost of cancellation if
            there would be a penalty
        rating (int): The rating the user left for this ride, from 1 to 5
        feedback (string): The written feedback the user left for this ride
        route_url (string): The web view showing the passenger, driver, and
            route for this ride. This field will only be present for rides
            created through this API, or that have been shared through the
            "Share my Route" feature
        requested_at (DateTime): The ride requested timestamp in date and
            time
        ride_profile (RideProfileEnum): Indicates whether the ride was
            requested from the business profile or personal profile of the
            user.

    """

    def __init__(self, 
                 ride_id = None,
                 status = None,
                 ride_type = None,
                 passenger = None,
                 driver = None,
                 vehicle = None,
                 origin = None,
                 destination = None,
                 pickup = None,
                 dropoff = None,
                 location = None,
                 primetime_percentage = None,
                 distance_miles = None,
                 duration_seconds = None,
                 price = None,
                 line_items = None,
                 can_cancel = None,
                 canceled_by = None,
                 cancellation_price = None,
                 rating = None,
                 feedback = None,
                 route_url = None,
                 requested_at = None,
                 ride_profile = None):
        """Constructor for the RideDetail class"""
        
        # Initialize members of the class
        self.ride_id = ride_id
        self.status = status
        self.ride_type = ride_type
        self.passenger = passenger
        self.driver = driver
        self.vehicle = vehicle
        self.origin = origin
        self.destination = destination
        self.pickup = pickup
        self.dropoff = dropoff
        self.location = location
        self.primetime_percentage = primetime_percentage
        self.distance_miles = distance_miles
        self.duration_seconds = duration_seconds
        self.price = price
        self.line_items = line_items
        self.can_cancel = can_cancel
        self.canceled_by = canceled_by
        self.cancellation_price = cancellation_price
        self.rating = rating
        self.feedback = feedback
        self.route_url = route_url
        self.requested_at = requested_at
        self.ride_profile = ride_profile

        # Create a mapping from Model property names to API property names
        self.names = {
            "ride_id" : "ride_id",
            "status" : "status",
            "ride_type" : "ride_type",
            "passenger" : "passenger",
            "driver" : "driver",
            "vehicle" : "vehicle",
            "origin" : "origin",
            "destination" : "destination",
            "pickup" : "pickup",
            "dropoff" : "dropoff",
            "location" : "location",
            "primetime_percentage" : "primetime_percentage",
            "distance_miles" : "distance_miles",
            "duration_seconds" : "duration_seconds",
            "price" : "price",
            "line_items" : "line_items",
            "can_cancel" : "can_cancel",
            "canceled_by" : "canceled_by",
            "cancellation_price" : "cancellation_price",
            "rating" : "rating",
            "feedback" : "feedback",
            "route_url" : "route_url",
            "requested_at" : "requested_at",
            "ride_profile" : "ride_profile",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            ride_id = dictionary.get("ride_id")
            status = dictionary.get("status")
            ride_type = dictionary.get("ride_type")
            passenger = PassengerDetail.from_dictionary(dictionary.get("passenger")) if dictionary.get("passenger") else None
            driver = DriverDetail.from_dictionary(dictionary.get("driver")) if dictionary.get("driver") else None
            vehicle = VehicleDetail.from_dictionary(dictionary.get("vehicle")) if dictionary.get("vehicle") else None
            origin = RideLocation.from_dictionary(dictionary.get("origin")) if dictionary.get("origin") else None
            destination = RideLocation.from_dictionary(dictionary.get("destination")) if dictionary.get("destination") else None
            pickup = PickupDropoffLocation.from_dictionary(dictionary.get("pickup")) if dictionary.get("pickup") else None
            dropoff = PickupDropoffLocation.from_dictionary(dictionary.get("dropoff")) if dictionary.get("dropoff") else None
            location = RideLocation.from_dictionary(dictionary.get("location")) if dictionary.get("location") else None
            primetime_percentage = dictionary.get("primetime_percentage")
            distance_miles = dictionary.get("distance_miles")
            duration_seconds = dictionary.get("duration_seconds")
            price = Cost.from_dictionary(dictionary.get("price")) if dictionary.get("price") else None
            line_items = None
            if dictionary.get("line_items") != None:
                line_items = list()
                for structure in dictionary.get("line_items"):
                    line_items.append(LineItem.from_dictionary(structure))
            can_cancel = dictionary.get("can_cancel")
            canceled_by = dictionary.get("canceled_by")
            cancellation_price = CancellationCost.from_dictionary(dictionary.get("cancellation_price")) if dictionary.get("cancellation_price") else None
            rating = dictionary.get("rating")
            feedback = dictionary.get("feedback")
            route_url = dictionary.get("route_url")
            requested_at = dateutil.parser.parse(dictionary.get("requested_at")) if dictionary.get("requested_at") else None
            ride_profile = dictionary.get("ride_profile")
            # Return an object of this model
            return cls(ride_id,
                       status,
                       ride_type,
                       passenger,
                       driver,
                       vehicle,
                       origin,
                       destination,
                       pickup,
                       dropoff,
                       location,
                       primetime_percentage,
                       distance_miles,
                       duration_seconds,
                       price,
                       line_items,
                       can_cancel,
                       canceled_by,
                       cancellation_price,
                       rating,
                       feedback,
                       route_url,
                       requested_at,
                       ride_profile)
