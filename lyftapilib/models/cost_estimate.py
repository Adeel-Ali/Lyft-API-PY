# -*- coding: utf-8 -*-

"""
    lyftapilib.models.cost_estimate
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2016
"""
from .base_model import BaseModel

class CostEstimate(BaseModel):

    """Implementation of the 'CostEstimate' model.

    A non-guaranteed estimate of price

    Attributes:
        ride_type (RideTypeEnum): The ID of the ride type
        display_name (string): A human readable description of the ride type
        currency (string): The ISO 4217 currency code for the amount (e.g.
            'USD')
        estimated_cost_cents_min (int): Estimated lower bound for trip cost,
            in minor units (cents). Estimates are not guaranteed, and only
            provide a reasonable range based on current conditions.
        estimated_cost_cents_max (int): Estimated upper bound for trip cost,
            in minor units (cents). Estimates are not guaranteed, and only
            provide a reasonable range based on current conditions.
        estimated_distance_miles (float): Estimated distance for this trip
        estimated_duration_seconds (int): Estimated time to get from the start
            location to the end.
        is_valid_estimate (bool): The validity of the cost estimate returned
        primetime_percentage (string): Current Prime Time Percentage. Prime
            Time adds a percentage to ride costs, prior to other applicable
            fees. When ride requests greatly outnumber available drivers, our
            system will automatically turn on Prime Time. If Prime Time is
            inactive, the value returned will be '0%'. Note: The returned
            estimate already has Prime Time factored in. The value is returned
            here for reference and to allow users to confirm/accept Prime Time
            prior to initiating a ride.
        primetime_confirmation_token (string): This token is needed when
            requesting rides. See 'Request a Lyft' for more details

    """

    def __init__(self, 
                 ride_type = None,
                 display_name = None,
                 currency = None,
                 estimated_cost_cents_min = None,
                 estimated_cost_cents_max = None,
                 estimated_distance_miles = None,
                 estimated_duration_seconds = None,
                 is_valid_estimate = None,
                 primetime_percentage = None,
                 primetime_confirmation_token = None):
        """Constructor for the CostEstimate class"""
        
        # Initialize members of the class
        self.ride_type = ride_type
        self.display_name = display_name
        self.currency = currency
        self.estimated_cost_cents_min = estimated_cost_cents_min
        self.estimated_cost_cents_max = estimated_cost_cents_max
        self.estimated_distance_miles = estimated_distance_miles
        self.estimated_duration_seconds = estimated_duration_seconds
        self.is_valid_estimate = is_valid_estimate
        self.primetime_percentage = primetime_percentage
        self.primetime_confirmation_token = primetime_confirmation_token

        # Create a mapping from Model property names to API property names
        self.names = {
            "ride_type" : "ride_type",
            "display_name" : "display_name",
            "currency" : "currency",
            "estimated_cost_cents_min" : "estimated_cost_cents_min",
            "estimated_cost_cents_max" : "estimated_cost_cents_max",
            "estimated_distance_miles" : "estimated_distance_miles",
            "estimated_duration_seconds" : "estimated_duration_seconds",
            "is_valid_estimate" : "is_valid_estimate",
            "primetime_percentage" : "primetime_percentage",
            "primetime_confirmation_token" : "primetime_confirmation_token",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            ride_type = dictionary.get("ride_type")
            display_name = dictionary.get("display_name")
            currency = dictionary.get("currency")
            estimated_cost_cents_min = dictionary.get("estimated_cost_cents_min")
            estimated_cost_cents_max = dictionary.get("estimated_cost_cents_max")
            estimated_distance_miles = dictionary.get("estimated_distance_miles")
            estimated_duration_seconds = dictionary.get("estimated_duration_seconds")
            is_valid_estimate = dictionary.get("is_valid_estimate")
            primetime_percentage = dictionary.get("primetime_percentage")
            primetime_confirmation_token = dictionary.get("primetime_confirmation_token")
            # Return an object of this model
            return cls(ride_type,
                       display_name,
                       currency,
                       estimated_cost_cents_min,
                       estimated_cost_cents_max,
                       estimated_distance_miles,
                       estimated_duration_seconds,
                       is_valid_estimate,
                       primetime_percentage,
                       primetime_confirmation_token)
