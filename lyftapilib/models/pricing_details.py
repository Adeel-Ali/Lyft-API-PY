# -*- coding: utf-8 -*-

"""
    lyftapilib.models.pricing_details
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2016
"""
from .base_model import BaseModel

class PricingDetails(BaseModel):

    """Implementation of the 'PricingDetails' model.

    TODO: type model description here.

    Attributes:
        base_charge (int): The base charge of the trip
        cancel_penalty_amount (int): The charge amount if cancel penalty is
            involved
        cost_minimum (int): The minimum charge for the trip
        cost_per_mile (int): The cost per mile
        cost_per_minute (int): The cost per minute
        currency (string): The ISO 4217 currency code for the amount (e.g.
            USD)
        trust_and_service (int): Service fee

    """

    def __init__(self, 
                 base_charge = None,
                 cancel_penalty_amount = None,
                 cost_minimum = None,
                 cost_per_mile = None,
                 cost_per_minute = None,
                 currency = None,
                 trust_and_service = None):
        """Constructor for the PricingDetails class"""
        
        # Initialize members of the class
        self.base_charge = base_charge
        self.cancel_penalty_amount = cancel_penalty_amount
        self.cost_minimum = cost_minimum
        self.cost_per_mile = cost_per_mile
        self.cost_per_minute = cost_per_minute
        self.currency = currency
        self.trust_and_service = trust_and_service

        # Create a mapping from Model property names to API property names
        self.names = {
            "base_charge" : "base_charge",
            "cancel_penalty_amount" : "cancel_penalty_amount",
            "cost_minimum" : "cost_minimum",
            "cost_per_mile" : "cost_per_mile",
            "cost_per_minute" : "cost_per_minute",
            "currency" : "currency",
            "trust_and_service" : "trust_and_service",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            base_charge = dictionary.get("base_charge")
            cancel_penalty_amount = dictionary.get("cancel_penalty_amount")
            cost_minimum = dictionary.get("cost_minimum")
            cost_per_mile = dictionary.get("cost_per_mile")
            cost_per_minute = dictionary.get("cost_per_minute")
            currency = dictionary.get("currency")
            trust_and_service = dictionary.get("trust_and_service")
            # Return an object of this model
            return cls(base_charge,
                       cancel_penalty_amount,
                       cost_minimum,
                       cost_per_mile,
                       cost_per_minute,
                       currency,
                       trust_and_service)
