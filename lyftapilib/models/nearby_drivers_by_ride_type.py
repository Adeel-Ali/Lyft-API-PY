# -*- coding: utf-8 -*-

"""
    lyftapilib.models.nearby_drivers_by_ride_type
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2016
"""
from .nearby_driver import NearbyDriver
from .base_model import BaseModel

class NearbyDriversByRideType(BaseModel):

    """Implementation of the 'NearbyDriversByRideType' model.

    TODO: type model description here.

    Attributes:
        ride_type (string): driver's ride type. if driver is eligable for
            several ride types, he will be duplicated.
        drivers (list of NearbyDriver): list of nearby drivers group by ride
            type sorted by eta

    """

    def __init__(self, 
                 ride_type = None,
                 drivers = None):
        """Constructor for the NearbyDriversByRideType class"""
        
        # Initialize members of the class
        self.ride_type = ride_type
        self.drivers = drivers

        # Create a mapping from Model property names to API property names
        self.names = {
            "ride_type" : "ride_type",
            "drivers" : "drivers",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            ride_type = dictionary.get("ride_type")
            drivers = None
            if dictionary.get("drivers") != None:
                drivers = list()
                for structure in dictionary.get("drivers"):
                    drivers.append(NearbyDriver.from_dictionary(structure))
            # Return an object of this model
            return cls(ride_type,
                       drivers)
