# -*- coding: utf-8 -*-

"""
    lyftapilib.models.ride_receipt
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2016
"""
import dateutil.parser
from .cost import Cost
from .line_item import LineItem
from .charge import Charge
from .base_model import BaseModel

class RideReceipt(BaseModel):

    """Implementation of the 'RideReceipt' model.

    Receipt information of a processed ride.

    Attributes:
        ride_id (string): The unique ID of this ride
        price (Cost): The total price for the current ride
        line_items (list of LineItem): The break down of line items
        charges (list of Charge): The break down of charge method
        requested_at (DateTime): The ride requested timestamp in date and
            time
        ride_profile (RideProfileEnum): Indicates whether the ride was
            requested from the business profile or personal profile of the
            user.

    """

    def __init__(self, 
                 ride_id = None,
                 price = None,
                 line_items = None,
                 charges = None,
                 requested_at = None,
                 ride_profile = None):
        """Constructor for the RideReceipt class"""
        
        # Initialize members of the class
        self.ride_id = ride_id
        self.price = price
        self.line_items = line_items
        self.charges = charges
        self.requested_at = requested_at
        self.ride_profile = ride_profile

        # Create a mapping from Model property names to API property names
        self.names = {
            "ride_id" : "ride_id",
            "price" : "price",
            "line_items" : "line_items",
            "charges" : "charges",
            "requested_at" : "requested_at",
            "ride_profile" : "ride_profile",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            ride_id = dictionary.get("ride_id")
            price = Cost.from_dictionary(dictionary.get("price")) if dictionary.get("price") else None
            line_items = None
            if dictionary.get("line_items") != None:
                line_items = list()
                for structure in dictionary.get("line_items"):
                    line_items.append(LineItem.from_dictionary(structure))
            charges = None
            if dictionary.get("charges") != None:
                charges = list()
                for structure in dictionary.get("charges"):
                    charges.append(Charge.from_dictionary(structure))
            requested_at = dateutil.parser.parse(dictionary.get("requested_at")) if dictionary.get("requested_at") else None
            ride_profile = dictionary.get("ride_profile")
            # Return an object of this model
            return cls(ride_id,
                       price,
                       line_items,
                       charges,
                       requested_at,
                       ride_profile)
