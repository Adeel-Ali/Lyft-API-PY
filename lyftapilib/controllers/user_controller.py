# -*- coding: utf-8 -*-

"""
    lyftapilib.controllers.user_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 11/14/2016
"""

from .base_controller import *
from ..models.rides_response import RidesResponse
from ..models.profile import Profile
from ..models.location import Location
from ..models.ride_receipt import RideReceipt
from ..models.ride_detail import RideDetail
from ..models.ride_request import RideRequest
from ..exceptions.error_exception import ErrorException
from ..exceptions.cancellation_cost_error_exception import CancellationCostErrorException
from ..exceptions.ride_request_error_exception import RideRequestErrorException

class UserController(BaseController):

    """A Controller to access Endpoints in the lyftapilib API."""

    def get_rides(self,
                  start_time,
                  limit,
                  end_time = None):
        """Does a GET request to /rides.

        List rides

        Args:
            start_time (DateTime): Restrict to rides starting after this point
                in time. The earliest supported date is
                2015-01-01T00:00:00+00:00
            limit (int): The maximum number of rides to return. The default
                limit is 10 if not specified. The maximum allowed value is 50,
                an integer greater that 50 will return at most 50 results.
            end_time (DateTime, optional): Restrict to rides starting before
                this point in time. The earliest supported date is
                2015-01-01T00:00:00+00:00

        Returns:
            RidesResponse: Response from the API. An object with an array of
                up to `limit` rides taken by the user between `start_time` and
                `end_time`.


        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/rides'

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Process optional query parameters
        _query_parameters = {
            'start_time': start_time,
            'limit': limit,
            'end_time': end_time
        }

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorException('400 - A validation error occurred', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, RidesResponse.from_dictionary)



    def get_profile(self):
        """Does a GET request to /profile.

        The user's general info

        Returns:
            Profile: Response from the API. User ID was found and returned

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/profile'

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers)

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Profile.from_dictionary)



    def update_rides_destination_by_id(self,
                                       id,
                                       request):
        """Does a PUT request to /rides/{id}/destination.

        Update the destination of the ride

        Args:
            id (string): The ID of the ride
            request (Location): The coordinates and optional address of the
                destination

        Returns:
            Location: Response from the API. Successfully updated the
                destination. Returns the new destination.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/rides/{id}/destination'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'id': id
        })

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorException('400 - The \'error\' field will be one of the following:  * `bad_parameter`: A validation error occurred  * `invalid_destination`: Destination is generally invalid (eg. not in a Lyft service area)  * `destination_prohibited`: Lyft drop-offs are not permitted at this location (eg. some airports).  The \'error_description\' field will contain an explaination suitable to display to the user.  * `ride_is_lyft_line`: Cannot change the destination on Line rides  * `ride_is_finished`: Ride has already been completed ', _context)
        elif _context.response.status_code == 403:
            raise ErrorException('403 - User or client does not have permission to complete this request (`ride_does_not_belong_to_user`) ', _context)
        elif _context.response.status_code == 404:
            raise ErrorException('404 - No ride found with provided ride ID', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Location.from_dictionary)



    def get_rides_receipt_by_id(self,
                                id):
        """Does a GET request to /rides/{id}/receipt.

        Get the receipt of the rides.

        Args:
            id (string): The ID of the ride

        Returns:
            RideReceipt: Response from the API. Detailed ride receipt
                information including cancel penalty if applicable.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/rides/{id}/receipt'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'id': id
        })

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers)

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 403:
            raise ErrorException('403 - User or client does not have permission to complete this request', _context)
        elif _context.response.status_code == 404:
            raise ErrorException('404 - No ride receipt found with provided ride ID', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, RideReceipt.from_dictionary)



    def update_rides_rating_by_id(self,
                                  id,
                                  request):
        """Does a PUT request to /rides/{id}/rating.

        Add the passenger's rating, feedback, and tip

        Args:
            id (string): The ID of the ride
            request (RatingRequest): The rating and optional feedback

        Returns:
            mixed: Response from the API. Successfully added the rating

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/rides/{id}/rating'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'id': id
        })

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorException('400 - The \'error\' field will be one of the following:  * `bad_parameter`: A validation error occurred  * `user_cannot_rate_this_ride`: Rides can only be rated once, within 24 hours of drop-off, and before  the user starts another ride  * `tip_too_large`: tip amount is too large for this ride  * `tip_currency_not_accepted`: That tip currency is not accepted ', _context)
        elif _context.response.status_code == 409:
            raise ErrorException('409 - The \'error\' field will be:  * `ride_not_finished`: Ride is still in progress (not yet in the droppedOff state) ', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)



    def get_rides_by_id(self,
                        id):
        """Does a GET request to /rides/{id}.

        Get the ride detail of a given ride ID

        Args:
            id (string): The ID of the ride

        Returns:
            RideDetail: Response from the API. Detailed ride information
                including ride status, driver information, passenger
                information, vehicle information, location information and
                price


        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/rides/{id}'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'id': id
        })

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers)

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 403:
            raise ErrorException('403 - User or client does not have permission to complete this request', _context)
        elif _context.response.status_code == 404:
            raise ErrorException('404 - No ride found with provided ride ID', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, RideDetail.from_dictionary)



    def create_rides_cancel_by_id(self,
                                  id,
                                  request):
        """Does a POST request to /rides/{id}/cancel.

        Cancel a ongoing requested ride

        Args:
            id (string): The ID of the ride
            request (CancellationRequest): TODO: type description here.
                Example: 

        Returns:
            mixed: Response from the API. Successfully canceled the ride

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/rides/{id}/cancel'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'id': id
        })

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise CancellationCostErrorException('400 - Cancellation token required  * `cancel_confirmation_required`: a cancelation fee applies which the user must accept  * `invalid_cancel_confirmation`: provided token was invalid or expired ', _context)
        elif _context.response.status_code == 403:
            raise ErrorException('403 - User or client does not have permission to complete this request', _context)
        elif _context.response.status_code == 404:
            raise ErrorException('404 - No ride found with provided ride ID', _context)
        elif _context.response.status_code == 409:
            raise ErrorException('409 - You cannot cancel this ride', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)



    def create_rides(self,
                     request):
        """Does a POST request to /rides.

        Request a Lyft

        Args:
            request (Ride): Ride request information

        Returns:
            RideRequest: Response from the API. An object with high level ride
                information. Use `GET /v1/rides/{id}` for more details.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/rides'

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise RideRequestErrorException('400 - The \'error\' field can be one of the following:  * `bad_parameter`: A validation error occurred  * `no_service_in_area`: origin is not within a Lyft service area  * `ridetype_unavailable_in_region`: ridetype not supported at origin  * `primetime_confirmation_required`: user must accept primetime. A primetime confirmation token and details will be included in the response  * `invalid_primetime_confirmation`: supplied token is invalid or expired  * `destination_prohibited`: Lyft is not allowed to drop off at that destination (e.g. some airports).  User-displayable details in the \'error_description\' field  * `client_error`: an uncategorized error. Details in the \'error_description\' field ', _context)
        elif _context.response.status_code == 403:
            raise ErrorException('403 - User or client does not have permission to complete this request. Specific errors include:  * `user_payment_required`: The user does not have a valid payment method on file.  They must use the Lyft app to add or update one.  * `account_disabled`: The user\'s account has been suspended, and they must contact Lyft support.  * `user_in_driver_mode`: The user is logged in as a driver and can\'t request rides until they log out  * `verified_phone_required`: The user has not provided or verified their phone number.  They can add one in the Lyft app ', _context)
        elif _context.response.status_code == 409:
            raise ErrorException('409 - The \'error\' field will be one of the following:  * `no_drivers_available`: No drivers are available right now  * `user_already_in_ride`: User cannot request a ride while in a ride ', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, RideRequest.from_dictionary)


