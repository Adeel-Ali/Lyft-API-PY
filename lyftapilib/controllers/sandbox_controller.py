# -*- coding: utf-8 -*-

"""
    lyftapilib.controllers.sandbox_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 11/14/2016
"""

from .base_controller import *
from ..models.sandbox_ride_type import SandboxRideType
from ..models.sandbox_ride_update import SandboxRideUpdate
from ..exceptions.error_exception import ErrorException

class SandboxController(BaseController):

    """A Controller to access Endpoints in the lyftapilib API."""

    def update_sandbox_primetime(self,
                                 request):
        """Does a PUT request to /sandbox/primetime.

        Preset Prime Time percentage

        Args:
            request (SandboxPrimetime): Prime Time to be preset in the region
                surrounding the lat, lng

        Returns:
            mixed: Response from the API. Successfully applied Prime Time in
                sandbox

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/sandbox/primetime'

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorException('400 - Validation error occurred', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)



    def update_sandbox_ridetypes(self,
                                 request):
        """Does a PUT request to /sandbox/ridetypes.

        Preset types of rides for sandbox

        Args:
            request (SandboxRideType): Ridetypes to be preset in the region
                surrounding the lat, lng

        Returns:
            SandboxRideType: Response from the API. An object listing the
                ridetypes at a given location

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/sandbox/ridetypes'

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorException('400 - Validation error occurred', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SandboxRideType.from_dictionary)



    def update_sandbox_ridetypes_by_ride_type(self,
                                              ride_type,
                                              request):
        """Does a PUT request to /sandbox/ridetypes/{ride_type}.

        Driver availability for processing ride request

        Args:
            ride_type (RideType40Enum): TODO: type description here. Example:
                            request (SandboxDriverAvailability): Driver availability to be
                preset in the region surrounding the lat, lng

        Returns:
            mixed: Response from the API. Successfully set driver availability
                in sandbox

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/sandbox/ridetypes/{ride_type}'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'ride_type': ride_type
        })

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorException('400 - Validation error occurred', _context)
        elif _context.response.status_code == 404:
            raise ErrorException('404 - ride_type provided in the path is not supported in the current area', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)



    def update_sandbox_rides_by_id(self,
                                   id,
                                   status):
        """Does a PUT request to /sandbox/rides/{id}.

        Propagate ride through states

        Args:
            id (string): The ID of the ride
            status (RideStatusEnum): state to propagate the ride into

        Returns:
            SandboxRideUpdate: Response from the API. An object with the Ride
                ID and the new state

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.base_uri
 
        # Prepare query string for API call
        _query_builder += '/sandbox/rides/{id}'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'id': id
        })

        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare the API call.
        _request = self.http_client.put(_query_url, headers=_headers, parameters=status)

        # Apply authentication.
        OAuth2.apply(_request)

        # Execute the request.
        _context = self.execute_request(_request)        

        # Endpoint error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise ErrorException('400 - Validation error occurred', _context)
        elif _context.response.status_code == 403:
            raise ErrorException('403 - User or client does not have permission to complete this request', _context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SandboxRideUpdate.from_dictionary)


